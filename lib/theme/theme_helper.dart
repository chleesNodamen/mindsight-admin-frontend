import 'package:flutter/material.dart';
import 'package:mindsight_admin_page/utils/size_utils.dart';

String _appTheme = "primary";

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();

class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        headlineLarge: TextStyle(
          color: appTheme.black,
          fontSize: 32,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w700,
          height: 1.37,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black,
          fontSize: 28,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w700,
          height: 1.35,
        ),
        titleLarge: TextStyle(
          color: appTheme.black,
          fontSize: 22,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w700,
          height: 1.35,
        ),
        titleMedium: TextStyle(
          color: appTheme.black,
          fontSize: 20,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w700,
          height: 1.36,
        ),
        titleSmall: TextStyle(
          color: appTheme.black.withOpacity(0.4),
          fontSize: 18,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w700,
          height: 1.3,
        ),
        bodyLarge: TextStyle(
          color: appTheme.black,
          fontSize: 18,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w500,
          height: 1.33,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black.withOpacity(0.4),
          fontSize: 16,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w500,
          height: 1.37,
        ),
        bodySmall: TextStyle(
          color: appTheme.black.withOpacity(0.4),
          fontSize: 15,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w500,
          height: 1.33,
        ),
        labelLarge: TextStyle(
          color: appTheme.black.withOpacity(0.4),
          fontSize: 14,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w500,
          height: 1.28,
        ),
        labelMedium: TextStyle(
          color: colorScheme.secondaryContainer,
          fontSize: 12,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w500,
          height: 1.33,
        ),
      );
}

class PrimaryColors {
  // ui color
  Color get primary => const Color(0xFF00C1FF);
  Color get alertPositive => const Color(0xFF14AE5C);
  Color get alertNegative => const Color(0xFFEE2F2F);
  Color get background => const Color(0xFFEFF4F6);

  // color
  Color get skyBlue => const Color(0xFF00C1FF);
  Color get white => const Color(0XFFFFFFFF);
  Color get black => const Color(0XFF000204);
  Color get red => const Color(0xFFEE2F2F);
  Color get green => const Color(0xFF14AE5C);
  // gray scale
  Color get grayScale11 => const Color(0XFF000204);
  Color get grayScale10 => const Color(0XFF1A1C1E);
  Color get grayScale9 => const Color(0XFF333537);
  Color get grayScale8 => const Color(0XFF4D4F51);
  Color get grayScale7 => const Color(0XFF66686A);
  Color get grayScale6 => const Color(0XFF808284);
  Color get grayScale5 => const Color(0XFF999B9D);
  Color get grayScale4 => const Color(0XFFB3B5B7);
  Color get grayScale3 => const Color(0XFFCCCED0);
  Color get grayScale2 => const Color(0XFFE6E8EA);
  Color get grayScale1 => const Color(0XFFFBFDFF);
}

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    // return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      useMaterial3: false,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.background,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.grayScale8,
            width: 1.h,
          ),
          shape: const RoundedRectangleBorder(),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return Colors.transparent;
        }),
        side: const BorderSide(width: 1),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.primary,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.grayScale1,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF00C1FF),
    primaryContainer: Color(0XFF7500FF),
    secondaryContainer: Color(0XFF999B9D),

    // Error colors
    errorContainer: Color(0XFF007AFF),
    onError: Color(0XFF20BEFA),
    onErrorContainer: Color(0X190E1618),

    // On colors(text colors)
    onPrimary: Color(0XFF1C1B1F),
    onPrimaryContainer: Color(0XFFD1F9E4),
    onSecondaryContainer: Color(0XFF0005FF),
  );
}
